#!/usr/bin/env python3
#-*- mode: python; -*-
# really wants python 3.7+

import argparse
import os
import sys
from pathlib import Path
import subprocess
from subprocess import DEVNULL
import tempfile
import json
import sqlite3

DEFAULT_DB=str(Path.home() / '.cloudbox.sqlite3')

class Activator:
    def __init__(self, tenant, cluster):
        self.tenant = tenant
        self.cluster = cluster
        
        self.mydir = os.path.dirname(os.path.abspath(__file__)) #we use this to find bashrc.sh
        self.home = Path.home()
        self.dotklu = Path(os.getenv('CLOUDBOXDB', DEFAULT_DB))
        if not self.dotklu.exists():
            print(f'kactivate database {self.dotklu} doesn\'t exist.  Try seeding with "kdb -i"')
            sys.exit(1)

    def go(self):
        con = sqlite3.connect(self.dotklu)
        cur = con.cursor()
        # look up by alias
        cur.execute('SELECT project FROM aliases WHERE name=?', (self.tenant,))
        stuff = cur.fetchone()
        if stuff is None:
            print(f'Error: Could not find {self.tenant}')
            sys.exit(1)
        p = stuff[0]
        cur.execute('SELECT name, pnum, browser FROM projects WHERE pid=?', (p,))
        pname, pnum, browser = cur.fetchone()
        cur.execute('SELECT zone, url FROM clusters WHERE project=? AND name=?', (p, f'{self.cluster}-cluster'))
        czone, curl = cur.fetchone()

        self.kproject = p
        self.kzone = czone
        self.kluster = f'{self.cluster}-cluster'

        """
        with self.dotklu.open() as db:
            stuff = json.load(db)
            t = stuff[self.tenant]
            self.kproject = t['project']
            cs = t['clusters'][self.cluster]
            self.kzone = cs['zone']
            self.kluster = cs['cluster']
        """

        _, tmpfile = tempfile.mkstemp()
        self.check_config()
        try:
            self.make_dotbashrc(Path(tmpfile))
            subprocess.call(['/bin/bash', '--init-file', tmpfile])
        finally:
            os.remove(tmpfile)

    def check_config(self):
        #r = subprocess.run(['gcloud', 'config', 'configurations', 'describe', self.tenant, '--quiet'], stdout=DEVNULL, stderr=DEVNULL)
        r = subprocess.run(['gcloud', 'config', 'configurations', 'describe', self.tenant], stdout=DEVNULL, stderr=DEVNULL)
        if (r.returncode != 0):  # no configuration, we need to create it
            # gcloud config configurations create
            #r = subprocess.run(['gcloud', 'config', 'configurations', 'create', self.tenant, '--quiet', '--no-activate'], stdout=DEVNULL, stderr=DEVNULL)
            r = subprocess.run(['gcloud', 'config', 'configurations', 'create', self.tenant, '--no-activate'], stdout=DEVNULL, stderr=DEVNULL)
            if (r != 0):
                print("Couldn't create "+self.tenant+" configuration")
                sys.exit(-1)

    def make_dotbashrc(self, p):
        with p.open('w') as out:
            # info passing to the subshell
            out.write(f'export KCLUSTER={self.cluster}\n')            
            out.write('export KTENANT="'+(self.tenant)+'"\n')
            out.write('export KKLUSTER="'+(self.kluster)+'"\n')
            out.write('export KZONE="'+(self.kzone)+'"\n')
            out.write('export KPROJECT="'+(self.kproject)+'"\n')
            out.write('export TENANT="'+(self.tenant.replace("-","_"))+'"\n')
            
            # add the contents of the bashrc from the cwd of the script
            with (Path(self.mydir)/'bashrc.sh').open() as inf:
                out.writelines(inf.readlines())
            

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='start a local shell configured to connect to a GKE cluster in a specific tenant project')
    parser.add_argument('tenant', help='which tenant to connect to')
    parser.add_argument('cluster', nargs='?', help='which cluster in the tenant to connect to (default is "cde")', default='cde')

    args = parser.parse_args()
    activator = Activator(args.tenant, args.cluster)
    activator.go()



