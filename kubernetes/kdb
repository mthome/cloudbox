#!/usr/bin/env python3
#-*- mode: python; -*-

# this manages the database that kactivate uses


import argparse
import os
import sys
from pathlib import Path
import subprocess
import tempfile
import json
import re
import sqlite3

# really wants python 3.7+
MIN_PYTHON = (3, 7)
assert sys.version_info >= MIN_PYTHON, f"requires Python {'.'.join([str(n) for n in MIN_PYTHON])} or newer"

DEFAULT_DB=str(Path.home() / '.cloudbox.sqlite3')

class Kdb:
    def __init__(self):
        self.home = Path.home()
        self.dotklu = Path(os.getenv('CLOUDBOXDB', DEFAULT_DB))

    def check_db(self):
        self.con = sqlite3.connect(self.dotklu)
        cur = self.con.cursor()
        cur.execute("""
CREATE TABLE IF NOT EXISTS projects (
        pid text PRIMARY KEY,
        name text,
        pnum text,
        browser text,
        environment text,
        legal text,
        owner text,
        stage text)""")
        
        cur.execute("""
CREATE TABLE IF NOT EXISTS aliases (
        name text PRIMARY KEY,
        project text NOT NULL,
        FOREIGN KEY (project) REFERENCES projects (pid))""")

        cur.execute("""
CREATE TABLE IF NOT EXISTS clusters (
        project text NOT NULL,
        name text NOT NULL,
        zone text NOT NULL,
        url text,
        PRIMARY KEY (project,name),
        FOREIGN KEY (project) REFERENCES projects (pid))""")
        
        return cur

    def import_from_gcloud(self):
        cur = self.check_db()
        
        projects = []

        # gcloud projects list --format="json(projectId,name, labels)" --filter=labels.owner=avoke
        projects_json = json.loads(subprocess.check_output(['gcloud', 'projects', 'list', '--format=json']))
        print(f'searching {len(projects_json)} projects')
        psql = """INSERT OR REPLACE INTO projects (pid, name, pnum, browser, environment, legal, owner, stage) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"""
        asql = """INSERT OR REPLACE INTO aliases (name, project) VALUES (?, ?)"""
        csql = """INSERT OR REPLACE INTO clusters (project, name, zone, url) VALUES (?, ?, ?, ?)"""
        for p in projects_json:
            if p['lifecycleState'] != 'ACTIVE':
                continue

            pid = p['projectId']
            name = p['name']
            pnum = p['projectNumber']
            labels = p.get('labels',{}) 
            browser = labels.get('browser', '')
            environment = labels.get('environment', '')
            legal = labels.get('legal-entity', '')
            owner = labels.get('owner', '')
            stage = labels.get('stage', '')
                
            if owner != 'avoke':
                if pid.startswith('ce-avoke'):
                    print(f'{pid} is not owned by avoke. correcting')
                    owner = 'avoke'
                else:
                    print(f'ignoring {pid}')
                    continue
                
            alias = browser
            if alias == '':
                m = re.fullmatch('ce-avoke-(.*)-(\d+)', pid)
                if m:
                    alias = m.group(1)
                m = re.fullmatch('(.*)-prod', alias)
                if m:
                    alias = m.group(1)
                m = re.fullmatch('tenant-(.*)', alias)
                if m:
                    alias = m.group(1)
                #print(f'computing alias={alias} for {pid}')

            cur.execute(psql, (pid, name, pnum, browser, environment, legal, owner, stage))
            #print(f'added pid={pid} name="{name}" browser={browser} stage={stage}')
            projects.append(pid)
            if alias != '':
                cur.execute(asql, (alias, pid))
                # print(f'added {alias} as alias for {pid}')

        for pid in projects:
            cjs = json.loads(subprocess.check_output(['gcloud', 'container',
                                                      'clusters', 'list', f'--project={pid}','--format=json']))           
            for cj in cjs:
                cname = cj['name']
                czone = cj['zone']
                slurl = cj['selfLink']
                cur.execute(csql, (pid, cname, czone, slurl))
                print(f'cluster={pid}/{cname} {czone}')

        self.con.commit()
                
    def list_projects(self):
        cur = self.check_db()
        cur.execute("SELECT name, pid FROM projects")
        print(f'projects:')
        for r in cur.fetchall():
            print(f'{r[1]}')
        print();
        print('aliases')
        cur.execute("SELECT name, project FROM aliases")
        for r in cur.fetchall():
            print(f'{r[0]}')

        cur.execute("SELECT project, name, zone, url FROM clusters")
        for p,n,z,u in cur.fetchall():
            print(f'{p}/{n} {u}')

    def add_alias(self, arg):
        (alias, old) = arg.split('=')
        cur = self.check_db()

        project = None
        
        # is it a project name?
        cur.execute('SELECT pid FROM projects WHERE pid=?', (old,))
        stuff = cur.fetchone()
        if stuff is not None:
            project = stuff[0]
        else:
            cur.execute('SELECT project FROM aliases WHERE name=?', (old,))
            stuff = cur.fetchone()
            if stuff is not None:
                project = stuff[0]
            else:
                print(f'Could not find project identified by {old}')
                sys.exit(1)
        cur.execute('INSERT OR REPLACE INTO aliases (name, project) VALUES (?, ?)', (alias, project))
        self.con.commit()
        print(f'adding local alias "{alias}" to project "{project}"')
        

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='manage your personal db for kactivate')
    parser.add_argument('-i', '--import_projects', help='Import projects', action='store_true')
    parser.add_argument('-l', '--list_projects', help='List projects', action='store_true')
    parser.add_argument('-a', '--alias', help='add an alias, e.g "--alias newalias=oldaliasorproject')

    args = parser.parse_args()
    kdb = Kdb()
    if args.import_projects:
        kdb.import_from_gcloud()
    if args.list_projects:
        kdb.list_projects()
    if args.alias is not None:
        kdb.add_alias(args.alias)
    kdb.con.close()

